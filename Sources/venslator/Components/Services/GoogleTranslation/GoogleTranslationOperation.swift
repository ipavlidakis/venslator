//
//  GoogleTranslationOperation.swift
//  venslator
//
//  Created by Ilias Pavlidakis on 19/09/2020.
//

import Foundation

private let kAPIUrl: URL = URL(string: "https://translation.googleapis.com/language/translate/v2")!

enum GoogleTranslationOperation {

    static func makeConfiguration(
        for targetLanguage: String,
        command: TranslateCommand
    ) throws -> Configuration {
        let fileHeader = """
        // Generated by venslator
        // by using the GoogleTranslate API
        // Created by Ilias Pavlidakis
        """
        return try Configuration(
            sourceLanguage: command.sourceLanguage,
            targetLanguage: targetLanguage,
            path: command.path,
            outputPath: command.outputPath,
            apiKey: command.apiKey,
            fileHeader: fileHeader
        )
    }

    static func makeRequest(
        _ configuration: ConfigurationProtocol,
        _ key: String,
        _ value: String
    ) -> URLRequest {

        guard let configuration = configuration as? GoogleTranslationOperation.Configuration else {
            fatalError("GoogleTranslationOperation requires configuration of type GoogleTranslationOperation.Configuration")
        }

        let headers = [
            "Content-type": "application/json; charset=utf-8;",
            "Authorization": "Bearer \(configuration.apiKey)"
        ]

        let requestBody = TranslationRequest(
            toLanguage: configuration.targetLanguage,
            text: value
        )

        var request = URLRequest(
            url: kAPIUrl,
            cachePolicy: .reloadIgnoringCacheData,
            timeoutInterval: 30
        )
        request.httpMethod = "POST"
        request.allHTTPHeaderFields = headers
        request.httpBody = try? JSONEncoder().encode(requestBody)

        return request
    }

    static func makeOperation(
        _ key: String,
        _ request: URLRequest
    ) -> Operation {
        TranslationOperation<TranslationResponse>(key: key, request: request)
    }

}

